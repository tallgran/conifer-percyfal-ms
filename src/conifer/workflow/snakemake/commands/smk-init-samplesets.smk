"""# Init samplesets - generated by smk-init-samplesets.smk

Generate samplesets from master samplesheet and a sample list for each
sampleset. The input sample list is a text file with sample names. For
all samplesets except P.abies the samples have been defined elsewhere
and are setup with conifer datasources. See resources/datasources.yaml
for details.

The final output sample sets are:

- P.abies - all P.abies samples (n=1056)
- highcov - high coverage samples and mutants (n=296)
- north - north population, selection scans (n=26)
- south - south population, selection scans (n=26)
- northsouth - north and south populations, selection scans (n=52)

"""

import os
import re
import sys
from conifer.snakemake.config import SchemaFiles
from pathlib import Path
from snakemake.utils import validate
import pandas as pd


envvars:
    "PROJECT_ROOT",


PROJECT_ROOT = Path(os.environ["PROJECT_ROOT"])


##############################
# Configuration
##############################
configfile: Path("config/config.yaml")


validate(config, schema=SchemaFiles.CONFIGURATION_SCHEMA)

samples = pd.read_table(config["samples"])
validate(samples, schema=SchemaFiles.SAMPLES_SCHEMA)

samplesets = ["P.abies", "north", "south", "highcov", "northsouth"]


wildcard_constraints:
    data="data",
    interim="data/interim",
    reports="reports",
    sample=f"({'|'.join(samples.SM.tolist())})",


# Define main ALL target
ALL = expand("resources/samplesets/samples-{sampleset}.keep.txt", sampleset=samplesets)


rule all:
    input:
        ALL,


##############################
# Atomic rules
##############################
rule make_sampleset:
    """Make sampleset"""
    output:
        sampleset="resources/samplesets/samples-{label}.tsv",
    input:
        samplesheet="resources/samplesheet.tsv",
        sampleset="resources/samples-{label}.txt",
    params:
        exclude="diploid|haploid_ERX2426532",
    log:
        "logs/make_sampleset/resources/samplesets/samples-{label}.tsv.log",
    wildcard_constraints:
        sampleset=f"({'|'.join(samplesets)})",
    threads: 1
    shell:
        """csvtk add-header -H -n SM {input.sampleset} | csvtk join -tT -f SM {input.samplesheet} - | csvtk sort -tT -k SM | grep -Ev "{params.exclude}" > {output.sampleset}"""


rule make_rangewide_sampleset:
    """Custom rule to make rangewide sampleset"""
    output:
        dataset="resources/samplesets/samples-rangewide.tsv",
    input:
        samplesheet="resources/samplesheet.tsv",
        sampleset="resources/popgen_sampleIDs_rangewide.txt",
    log:
        "logs/make_sampleset/resources/samplesets/samples-rangewide.tsv.log",
    threads: 1
    shell:
        """csvtk cut -tT -f "VCF_ID" {input.sampleset} | csvtk join -tT -f "SM;VCF_ID" {input.samplesheet} - > {output.dataset}"""


rule make_sampleset_keep_file:
    """Output column with sample names for a sampleset"""
    output:
        txt="{resources}/samplesets/samples-{sampleset}.keep.txt",
    input:
        tsv="{resources}/samplesets/samples-{sampleset}.tsv",
    conda:
        "../envs/csvtk.yaml"
    wildcard_constraints:
        sampleset=f"({'|'.join(samplesets)})",
    benchmark:
        "benchmarks/{resources}/samplesets/samples-{sampleset}.keep.txt.benchmark.txt"
    log:
        "logs/{resources}/samplesets/samples-{sampleset}.keep.txt.log",
    threads: 1
    shell:
        """csvtk cut -t -f SM {input.tsv} > {output.txt}"""


rule make_sample_keep_file:
    """Output column with sample names for a single-individual sampleset"""
    output:
        txt="{resources}/samplesets/samples-{sample}.keep.txt",
    input:
        tsv="{resources}/samplesets/samples-{sample}.tsv",
    conda:
        "../envs/csvtk.yaml"
    benchmark:
        "benchmarks/{resources}/samplesets/samples-{sample}.keep.txt.benchmark.txt"
    log:
        "logs/{resources}/samplesets/samples-{sample}.keep.txt.log",
    threads: 1
    shell:
        """csvtk cut -t -f SM {input.tsv} |\
        csvtk replace -t -f SM -p "diploid" -r "Diploid" | \
        csvtk replace -t -f SM -p "haploid" -r "Haploid" \
        > {output.txt}"""


rule make_pabies_sampleset:
    """Make resources/samples-P.abies.txt"""
    output:
        txt="resources/samples-P.abies.txt",
    input:
        tsv="resources/samplesheet.tsv",
    params:
        exclude="diploid|haploid_ERX242653",
    conda:
        "../envs/csvtk.yaml"
    benchmark:
        "benchmarks/make_pabies_sampleset_txt/resources/sampleset-pabies.txt.benchmark.txt"
    log:
        "logs/make_pabies_sampleset_txt/resources/sampleset-pabies.txt.log",
    threads: 1
    shell:
        """csvtk grep -t -f Species -p P.abies {input.tsv} | csvtk cut -t -f SM | grep -Ev "{params.exclude}" > {output.txt}"""


rule make_northsouth_sampleset:
    """Make resources/samples-northsouth.txt"""
    output:
        txt="resources/samples-northsouth.txt",
    input:
        north="resources/samples-north.txt",
        south="resources/samples-south.txt",
    conda:
        "../envs/csvtk.yaml"
    benchmark:
        "benchmarks/make_northsouth_sampleset/resources/samples-northsouth.txt.benchmark.txt"
    log:
        "logs/make_northsouth_sampleset/resources/samples-northsouth.txt.log",
    threads: 1
    shell:
        """csvtk cat {input.north} {input.south} > {output.txt} 2> {log}"""


rule make_individual_sampleset:
    """Make sampleset consisting of single individual. Diploid and haploid have to be capitalized."""
    output:
        txt="resources/samples-{sample}.txt",
    input:
        tsv="resources/samplesheet.tsv",
    conda:
        "../envs/csvtk.yaml"
    benchmark:
        "benchmarks/make_individual_sampleset/resources/samples-{sample}.txt.benchmark.txt"
    log:
        "logs/make_individual_sampleset/resources/samples-{sample}.txt.log",
    threads: 1
    shell:
        """csvtk grep -t -f SM -p {wildcards.sample} {input.tsv} | \
        csvtk cut -t -f SM > {output.txt} 2>{log}"""


localrules:
    make_sampleset,
    make_rangewide_sampleset,
    make_pabies_sampleset,
    make_northsouth_sampleset,
    make_individual_sampleset,
    make_sampleset_keep_file,
