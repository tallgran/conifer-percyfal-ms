"""# Annotation module - generated by smk-annotation.smk.

Convert annotation files to regions. Outputs are found in
data/resources/regions.

UPDATE 2024-12-20: The annotation file has been updated and therefore
the rules have also been updated accordingly. The source tag has been
removed since we only have one source. The input annotation file is
now Picab02_230926_at01_longest_no_TE_sorted.gff3.gz

## Annotation coordinates vs mapping coordinates

Annotation coordinates are defined wrt Picab02_chromosomes.fasta.gz.
However, the coordinates of mapped sequences and consequently variants
are defined wrt
/proj/uppstore2017145/V2/users/tom/REF/SPRUCE_LOCKED/parsed.pabies-2.0.fa.
Therefore, annotation coordinates have been reassigned in the final
region output files.

"""
import os
import re
import sys
from conifer.snakemake.config import SchemaFiles
from pathlib import Path
from snakemake.utils import validate
import pandas as pd


TE_IDs_REMOVED = "data/resources/TE_IDs_REMOVED.txt"
PICAB_ANNOTATION = "Picab02_230926_at01_longest_no_TE_sorted"
PICAB_ANNOTATION_FILE = f"data/resources/{PICAB_ANNOTATION}.gff3.gz"
PICAB_ANNOTATION_FILE_DB = f"data/resources/{PICAB_ANNOTATION}.liftover.gff3.db"
PICAB_ANNOTATION_LIFTOVER_FILE = f"data/resources/{PICAB_ANNOTATION}.liftover.bed.gz"
PICAB_ANNOTATION_WITH_TE = "Picab02_230926_at01_longest"
PICAB_ANNOTATION_PSEUDOGENE = "Picab02_230926_at01_longest_no_TE_sorted.pseudogene"
PICAB_ANNOTATION_TE_ONLY = "Picab02_230926_at01_longest.TE"
PICAB_ANNOTATION_CDS_ONLY = "Picab02_230926_at01_longest_no_TE_sorted_CDSonly"


##############################
# Configuration
##############################
configfile: Path("config/config.yaml")


validate(config, schema=SchemaFiles.CONFIGURATION_SCHEMA)

samples = pd.read_table(config["samples"])
validate(samples, schema=SchemaFiles.SAMPLES_SCHEMA)


wildcard_constraints:
    data="data",
    interim="data/interim",
    reports="reports",
    region="(exon|intron|CDS|five_prime_UTR|three_prime_UTR|intergenic|UTR|gene)",
    sample=f"({'|'.join(samples.SM.tolist())})",


REGIONS = {
    "exon": "exon",
    "intron": "intron",
    "CDS": "CDS",
    "five_prime_UTR": "five_prime_UTR",
    "three_prime_UTR": "three_prime_UTR",
    "UTR": r"three_prime_UTR\|five_prime_UTR",
    "gene": "gene",
}

# Define main ALL target
ALL = {
    "readme": "data/resources/regions/README.md",
    "regions": expand(
        "data/resources/regions/{region}.bed.gz",
        region=[
            "exon",
            "intron",
            "CDS",
            "five_prime_UTR",
            "three_prime_UTR",
            "intergenic",
            "UTR",
            "gene",
            "genome",
            "pseudogene",
            "TE.gene",
        ],
    ),
    "db": expand(
        "data/resources/{annotation}.liftover.gff3.db",
        annotation=[
            PICAB_ANNOTATION,
            PICAB_ANNOTATION_PSEUDOGENE,
            PICAB_ANNOTATION_WITH_TE,
            PICAB_ANNOTATION_TE_ONLY,
            PICAB_ANNOTATION_CDS_ONLY,
        ],
    ),
    "gffutils": expand(
        "data/resources/regions/gffutils/{region}.bed.gz",
        region=[
            "exon",
            "intron",
            "CDS",
            "five_prime_UTR",
            "three_prime_UTR",
            "UTR",
            "gene",
        ],
    ),
    "custom": expand(
        "data/resources/regions/custom/{feature}:w1000:p3000.bed.gz",
        feature=[
            "PA_chr12_13:PA_chr12_G004594",
        ],
    ),
}


rule all:
    input:
        **ALL,


##############################
# Atomic rules
##############################
rule readme:
    output:
        md="data/resources/regions/README.md",
    input:
        "src/conifer/workflow/snakemake/commands/smk-annotation.smk",
    run:
        with open(output.md, "w") as fh:
            fh.write(__doc__)


rule liftover_gff_coordinates_to_bed:
    """Liftover coordinates from Picab02_chromosomes to parsed.pabies-2.0.fa.

    Output bed6 format. Replaces rule liftover_Picab_bed_coordinates_to_pabies (?).
    """
    output:
        bed="{prefix}.liftover.bed.gz",
    input:
        gff="{prefix}.gff3.gz",
        fai="data/resources/Picab02_chromosomes.fasta.gz.fai",
    params:
        window_size=100000000,
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    shell:
        """
        bedtools makewindows -g {input.fai} -w {params.window_size} |
        bedtools intersect -a - -b {input.gff} -wb |
        awk '
        {{end=$3%{params.window_size}; if (end == 0) end={params.window_size}; }}
        {{printf("%s_%s\\t%i\\t%i\\t%s\\t%s\\t%s\\n",
        $1, int($2/{params.window_size}) + 1, $2%{params.window_size}, end,
        $6, $9, $10)}}' |
        bgzip -c > {output.bed}
        """


rule liftover_gff:
    """Liftover gff coordinates from Picab02_chromosomes to parsed.pabies-2.0.fa."""
    output:
        gff3="{prefix}.liftover.gff3.gz",
    input:
        gff3="{prefix}.gff3.gz",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    log:
        "logs/{prefix}.liftover.gff3.log",
    shell:
        """conifer-liftoverBED {input.gff3} --type gff --chunkify | bgzip -c > {output.gff3}"""


rule extract_PA_chr_from_mapping_reference:
    """Extract only regions named PA_chr from mapping reference bed file"""
    output:
        "data/resources/pabies-2.0.fa.fai.chromosomes.bed",
    input:
        "data/resources/pabies-2.0.fa.fai.bed",
    conda:
        "../envs/conifer.yaml"
    shell:
        """cat {input} | grep "PA_chr[0-9][0-9]_[0-9]" > {output}"""


rule make_coding_regions:
    """Generate coding regions from coding annotation file"""
    output:
        bed="data/resources/regions/{region}.bed.gz",
        tbi="data/resources/regions/{region}.bed.gz.tbi",
    input:
        gff=PICAB_ANNOTATION_LIFTOVER_FILE,
        genome="data/resources/pabies-2.0.fa.fai.chromosomes.bed",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    params:
        region=lambda wildcards: REGIONS[wildcards.region],
    wildcard_constraints:
        region="(exon|intron|CDS|five_prime_UTR|three_prime_UTR|UTR|gene)",
    benchmark:
        "benchmarks/data/resources/regions/{region}.bed.gz.benchmark.txt"
    log:
        "logs/data/resources/regions/{region}.bed.gz.log",
    threads: 1
    shell:
        """
        bgzip -d -c {input.gff} | grep "{params.region}" |\
        bedtools sort -g {input.genome} | bedtools merge |\
        bgzip -c > data/resources/regions/{wildcards.region}.bed.gz \
        && tabix -p bed -S 1 data/resources/regions/{wildcards.region}.bed.gz
        """


rule make_intergenic_regions:
    """Generate intergenic regions from coding annotation file.

    Intergenic regions are here defined as the complement to CDS.
    """
    output:
        bed="data/resources/regions/intergenic.bed.gz",
        tbi="data/resources/regions/intergenic.bed.gz.tbi",
    input:
        bed="data/resources/regions/gene.bed.gz",
        genome="data/resources/pabies-2.0.fa.fai.chromosomes.bed",
        fai="data/resources/pabies-2.0.fa.fai",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    benchmark:
        "benchmarks/data/resources/regions/intergenic.bed.gz.benchmark.txt"
    log:
        "logs/data/resources/regions/intergenic.bed.gz.log",
    threads: 1
    shell:
        """
        bedtools subtract -a {input.genome} -b {input.bed} \
        -g {input.fai} | bgzip -c > data/resources/regions/intergenic.bed.gz && \
        tabix -p bed -S 1 data/resources/regions/intergenic.bed.gz
        """


rule make_custom_regions:
    """Generate custom regions from input annotation file.

    NB! The sources are *not* generated by other rules but originate
    from datasources. See resources/datasources.yaml for details on
    source. Currently used for pseudogene, 5k_upstream_gene and
    10k_upstream_gene.

    The input liftover is a bed file generated by
    liftover_gff_coordinates_to_bed. """
    output:
        bed="data/resources/regions/{feature}.bed.gz",
        tbi="data/resources/regions/{feature}.bed.gz.tbi",
    input:
        bed="data/resources/Picab02_230926_at01_longest_no_TE_sorted.{feature}.liftover.bed.gz",
        genome="data/resources/pabies-2.0.fa.fai.chromosomes.bed",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    wildcard_constraints:
        feature="(pseudogene)",
    benchmark:
        "benchmarks/data/resources/regions/{feature}.bed.gz.benchmark.txt"
    log:
        "logs/data/resources/regions/{feature}.bed.gz.log",
    threads: 1
    shell:
        """
        bedtools sort -g {input.genome} -i {input.bed} | bedtools merge |\
        bgzip -c > {output.bed} && tabix -p bed -S 1 {output.bed}
        """


rule bedtools_make_genome_region:
    """Make region file corresponding to all chromosomes in Picab02"""
    output:
        bed="{data}/resources/regions/genome.bed.gz",
        tbi="{data}/resources/regions/genome.bed.gz.tbi",
    input:
        bed="{data}/resources/pabies-2.0.fa.fai.chromosomes.bed",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    params:
        bed="{data}/resources/regions/genome.bed",
    benchmark:
        "benchmarks/{data}/resources/regions/genome.bed.gz.benchmark.txt"
    log:
        "logs/{data}/resources/regions/genome.bed.gz.log",
    threads: 1
    shell:
        """cp {input.bed} {params.bed};
        bgzip {params.bed} && tabix -p bed -S 1 {output.bed}
        """


rule fai_to_bed:
    """Convert fasta index to bed"""
    output:
        "{prefix}.fai.bed",
    input:
        "{prefix}.fai",
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/{prefix}.fai.bed.benchmark.txt"
    log:
        "logs/{prefix}.fai.bed.log",
    threads: 1
    shell:
        """
        cat {input} | awk '{{printf("%s\\t0\\t%i\\n", $1, $2)}}' > {output}
        """


rule create_pabies_bgzip:
    """Create bgzip file for pabies-2.0.fa.gz."""
    output:
        temp("data/resources/pabies-2.0.fa.bgz"),
    input:
        "data/resources/pabies-2.0.fa.gz",
    conda:
        "../envs/samtools.yaml"
    benchmark:
        "benchmarks/create_pabies_bgzip/data/resources/pabies-2.0.fa.bgz.benchmark.txt"
    log:
        "logs/create_pabies_bgzip/data/resources/pabies-2.0.fa.bgz.log",
    threads: 1
    shell:
        """zcat {input} | bgzip -c > {output}"""


rule fasta_index_pabies:
    """Create fasta index for bgzipped pabies-2.0.fa."""
    output:
        "data/resources/pabies-2.0.fa.fai",
    input:
        "data/resources/pabies-2.0.fa.bgz",
    conda:
        "../envs/samtools.yaml"
    benchmark:
        "benchmarks/fasta_index_pabies/data/resources/pabies-2.0.fa.fai.benchmark.txt"
    log:
        "logs/fasta_index_pabies/data/resources/pabies-2.0.fa.fai.log",
    threads: 1
    shell:
        """samtools faidx {input} -o {output}"""


rule make_TE_geneids:
    """Make TE geneids file. This file renames the geneids in the
    input file to a format which is consistent with the chromosome
    names. The output is used to generate a regions file with feature
    name TE.gene. These are clearly not bona fide genes but may be
    interesting to investigate nonetheless.
    """
    output:
        txt="data/resources/TE.geneids.txt",
    input:
        txt=TE_IDs_REMOVED,
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/make_TE_geneids/data/resources/TE.geneids.txt.benchmark.txt"
    log:
        "logs/make_TE_geneids/data/resources/TE.geneids.txt.log",
    threads: 1
    shell:
        """cat {input.txt} | sed -e "s/\.[a-zA-Z]*\.[0-9]*$//g" > {output.txt}"""


rule subset_gff_by_geneid:
    """Subset a gff by gene ids. Requires all annotation input."""
    output:
        gff3="data/resources/{picab}.{geneids}.liftover.gff3.gz",
    input:
        geneids="data/resources/{geneids}.geneids.txt",
        gff3="data/resources/{picab}.liftover.gff3.gz",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    wildcard_constraints:
        geneids="(TE)",
        picab="Picab02_230926_at01_longest",
    benchmark:
        "benchmarks/subset_gff_by_geneid/data/resources/{picab}.{geneids}.liftover.bed.gz.benchmark.txt"
    log:
        "logs/subset_gff_by_geneid/data/resources/{picab}.{geneids}.liftover.bed.gz.log",
    threads: 1
    shell:
        """
        zcat {input.gff3} | grep -f {input.geneids} |\
        bgzip -c > {output.gff3}
        """


rule make_geneid_coding_regions:
    """Make geneid coding from gff3 file.

    geneid is a tag that defines a set of genes, e.g., transposable
    elements (TE). The input gff therefore is the annotation file
    including TEs. """
    output:
        bed="data/resources/regions/{geneids}.{region}.bed.gz",
        tbi="data/resources/regions/{geneids}.{region}.bed.gz.tbi",
    input:
        gff=f"data/resources/{PICAB_ANNOTATION_WITH_TE}.{{geneids}}.liftover.gff3.gz",
        genome="data/resources/pabies-2.0.fa.fai.bed",
        chromosomes="data/resources/pabies-2.0.fa.fai.chromosomes.bed",
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    params:
        region=lambda wildcards: REGIONS[wildcards.region],
    benchmark:
        "benchmarks/make_geneid_regions/data/resources/regions/{geneids}.{region}.bed.gz.benchmark.txt"
    log:
        "logs/make_geneid_regions/data/resources/regions/{geneids}.{region}.bed.gz.log",
    threads: 1
    shell:
        """
        bgzip -d -c {input.gff} | grep "{params.region}" |\
        bedtools intersect -a - -b {input.chromosomes} -wa |\
        bedtools sort -g {input.genome} | bedtools merge |\
        bgzip -c > data/resources/regions/{wildcards.geneids}.{wildcards.region}.bed.gz \
        && tabix -p bed -S 1 data/resources/regions/{wildcards.geneids}.{wildcards.region}.bed.gz > {log} 2>&1
        """


rule conifer_make_regions_create_db:
    """Create gff database file for conifer"""
    output:
        db="data/resources/{prefix}.gff3.db",
    input:
        gz="data/resources/{prefix}.gff3.gz",
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/conifer_make_regions_create_db/data/resources/{prefix}.gff3.db.benchmark.txt"
    log:
        "logs/conifer_make_regions_create_db/data/resources/{prefix}.gff3.db.log",
    threads: 1
    shell:
        """conifer-gffutils create-db {input.gz} {output.db} > {log} 2>&1"""


rule conifer_make_regions_gffutils:
    """Make bed regions from PICAB_ANNOTATION_FILE_DB using gffutils"""
    output:
        bed="data/resources/regions/gffutils/{feature}.bed",
    input:
        db=PICAB_ANNOTATION_FILE_DB,
    conda:
        "../envs/bedtools.yaml"
    envmodules:
        *config["envmodules"]["bedtools"],
    benchmark:
        "benchmarks/conifer_make_regions_gffutils/data/resources/regions/gffutils/{feature}.bed.gz.benchmark.txt"
    log:
        "logs/conifer_make_regions_gffutils/data/resources/regions/gffutils/{feature}.bed.gz.log",
    threads: 1
    shell:
        """conifer-gffutils make-regions -f {wildcards.feature} -a {input.db} {output.bed} > {log} 2>&1"""


rule conifer_make_custom_feature_gffutils:
    """Make region file for specific feature id"""
    output:
        bed="data/resources/regions/custom/{chrom}:{feature}:w{window_size}:p{padding}.bed",
    input:
        db=PICAB_ANNOTATION_FILE_DB,
    envmodules:
        *config["envmodules"]["bedtools"],
    conda:
        "../envs/bedtools.yaml"
    benchmark:
        "benchmarks/conifer_make_custom_regions_gffutils/data/resources/regions/custom/{chrom}:{feature}:w{window_size}:{padding}.bed.benchmark.txt"
    log:
        "logs/conifer_make_custom_regions_gffutils/data/resources/regions/custom/{chrom}:{feature}:w{window_size}:p{padding}.bed.log",
    threads: 1
    shell:
        """conifer-gffutils make-windowed-feature --no-round -p {wildcards.padding} -w {wildcards.window_size} {input.db} {wildcards.feature} > {output.bed}"""


rule bgzip_compress_and_index_gffutils_regions:
    """Run bgzip compress and index"""
    output:
        gz="data/resources/regions/{label}/{feature}.bed.gz",
        gzi="data/resources/regions/{label}/{feature}.bed.gz.gzi",
    input:
        gz="data/resources/regions/{label}/{feature}.bed",
    envmodules:
        *config["envmodules"]["tabix_bgzip"],
    conda:
        "../envs/tabixbgzip.yaml"
    wildcard_constraints:
        label="(gffutils|custom)",
    benchmark:
        "benchmarks/bgzip_index/data/resources/regions/{label}/{feature}.bed.gz.gzi.benchmark.txt"
    log:
        "logs/bgzip_index/data/resources/regions/{label}/{feature}.bed.gz.gzi.log",
    threads: 1
    shell:
        """bgzip -i {input.gz}"""
