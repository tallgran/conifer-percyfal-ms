"""Diversity module.

Calculate diversity with vcftools and normalize the results over
windows using accessibility masks and genome features. The
accessibility masks are generated by the
d4tools_awk_bedtools_filter_d4 rule.

## 2024-01-15 Diversity with vcftools

A recent publication by Konopinski (10.1111/1755-0998.13707) has shown
that calculating the average weighted nucleotide diverisity is better
than pixy by Korunes et al (10.1111/1755-0998.13326). The Konopinski
formula for pi is

pi = Ndiff / Ncomp

whereas the vcftools site pi for bi-allelic sites is calculated as
(NB: verify this! )

pi = 2c0c1 / (n(n-1))

where c0, c1 are the allele counts and n is the number of samples.
These formulae are equivalent since Ndiff = c0 * c1, and Ncomp equals
nchoosek(n, 2) = n(n-1)/2.

Therefore, we can calculate the vcftools per site pi and then divide
by the number of accessible sites, either in a window or in the
genome. The accessible sites can also be intersected with genome
features.

## 2023-06-16 OBSOLETE

Contains code to calculate diversity with vcftools. The current
implementation is based on sgkit and resides in var-diversity.smk. The
issue here was that vcftools windowed statistics gave incomprehensible
results, such as the diversity in genome being higher than intergenic.
Manual windowed calculations based on
/proj/uppstore2017145/V2/users/perun/conifer/src/scripts/diversity.R
were made to generate results for UmeÃ¥ meeting in
results/meetings/umea_20230508, which prompted testing and development
of the sgkit alternative.

"""
import re
import sys
import glob
from conifer.snakemake.config import SchemaFiles
from conifer.snakemake import inputs
from conifer.snakemake import params
from conifer.snakemake.lmod import get_envmodules
from pathlib import Path
from snakemake.utils import validate
import pandas as pd


##############################
# vcftools args
##############################
vcftools_config = {
    "sites.pi": "--site-pi",
    "frq": "--freq",
    "frq.count": "--counts",
    "TsTv.summary": "--TsTv-summary",
}
vcftools_windowed_config = {
    "windowed.pi": "--window-pi",
    "Tajima.D": "--TajimaD",
    "TsTv": "--TsTv",
    "snpden": "--SNPdensity",
}
vcftools_summary = ["sites.pi"]


##############################
# Configuration
##############################
configfile: Path("config/config.yaml")


validate(config, schema=SchemaFiles.CONFIGURATION_SCHEMA)

samples = pd.read_table(config["samples"])
validate(samples, schema=SchemaFiles.SAMPLES_SCHEMA)

# Make dictionary of vcf input files
with open("resources/vcffiles.txt", "r") as fh:
    vcf_files = [re.sub(".vcf.gz", "", x.strip()).split("_") for x in fh.readlines()]
tuples = [("_".join([x, y]), z) for x, y, z in vcf_files]
vcf_map = {
    key: sorted([int(value) for _, value in tuples if _ == key]) for key, _ in tuples
}


FEATURE = config["mask"]["features"]
CHROMOSOMES = config["chromosomes"]
PICAB_ANNOTATION = "Picab02_230926_at01_longest_no_TE_sorted"


wildcard_constraints:
    chromosome="PA_chr[0-9]+",
    data="data",
    extension_size="[0-9]+",
    index="[0-9]+",
    interim="data/interim",
    reports="reports",
    results="results",
    feature=f"({'|'.join(FEATURE)})",
    sample=f"({'|'.join(samples.SM.tolist())})",
    statistic=f"({'|'.join(list(vcftools_windowed_config.keys()) + list(vcftools_config.keys()))})",
    window_size="[0-9]+",
    min="[0-9]+",
    max="[0-9]+",


ALL = dict(
    config="results/config/diversity.config.yaml", multiqc=[], plots=[], stats=[]
)

for sampleset in config["mask"]["sampleset"].keys():
    ss = config["mask"]["sampleset"][sampleset]
    ALL[f"{sampleset}.site"] = expand(
        Path(f"results/diversity/MQ10/{sampleset}")
        / "{chromosome}/{chromosome}.{statistic}.gz",
        chromosome=vcf_map.keys(),
        statistic=vcftools_config.keys(),
    )
    ALL[f"{sampleset}.summary"] = expand(
        Path(f"results/diversity/MQ10/{sampleset}")
        / "{chromosome}/{chromosome}.{statistic}.summary.txt.boxplot.html",
        chromosome=vcf_map.keys(),
        statistic=["sites.pi"],
    )
    window_size = config["mask"]["window_size"]
    if "window_size" in ss.keys():
        window_size.extend(ss["window_size"])
    ALL[f"{sampleset}.site.window.summary"] = expand(
        Path(f"results/diversity/MQ10/{sampleset}")
        / "{statistic}.w{window}.summary.csv.gz",
        statistic=vcftools_summary,
        window=window_size,
    )

ALL["P.abies.genic.proximity.summary"] = expand(
    Path(f"results/diversity/MQ10")
    / "{sampleset}"
    / "{statistic}.w1000.e200000.{mode}.summary.csv.gz",
    statistic=vcftools_summary,
    sampleset=["P.abies", "highcov"],
    mode=["CDS", "gene"],
)
ALL["northsouth.feature.summary"] = expand(
    Path(f"results/diversity/MQ10")
    / "{sampleset}"
    / "{statistic}.{feature}.summary.csv.gz",
    statistic=vcftools_summary,
    sampleset=["north", "south", "highcov"],
    feature=["CDS"],
)
ALL["diploid"] = expand(
    Path(f"results/diversity/MQ10")
    / "{sampleset}"
    / "{statistic}.summary.csv.gz",
    statistic=vcftools_summary,
    sampleset=["diploid"],
)
ALL["custom"] = expand(
    Path(f"results/diversity/MQ10")
        / "{sampleset}"
        / "{statistic}.{region}.summary.csv.gz",
        statistic=vcftools_summary,
        region=["PA_chr12_G004594"],
        sampleset=["highcov"],
)


if config.get("__test__") is True:

    include: "test-diversity-config.smk"


rule all:
    input:
        **ALL,


##############################
# Atomic rules
##############################
rule tabix_bgzip:
    """Index vcf file"""
    output:
        tbi="{data}/vcf/{prefix}.vcf.gz.tbi",
    input:
        vcf="{data}/vcf/{prefix}.vcf.gz",
    conda:
        "../envs/tabixbgzip.yaml"
    envmodules:
        *config["envmodules"]["tabix_bgzip"],
    benchmark:
        "benchmarks/{data}/vcf/{prefix}.vcf.gz.tbi.benchmark.txt"
    log:
        "logs/{data}/vcf/{prefix}.vcf.gz.tbi.log",
    threads: 1
    shell:
        "tabix {input.vcf};"


rule temp_unzip_fasta:
    """Temporarily unzip input fasta file"""
    output:
        fa=temp("{prefix}.fa"),
    input:
        fa="{prefix}.fa.gz",
    conda:
        "../envs/conifer.yaml"
    envmodules:
        *config["envmodules"]["tabix_bgzip"],
    benchmark:
        "benchmarks/{prefix}.fa.benchmark.txt"
    log:
        "logs/{prefix}.fa.log",
    threads: 1
    shell:
        """
        bgzip -d -c {input.fa} > {output.fa}
        """


rule bcftools_select_biallelic_variants:
    """Select biallelic variants from raw variant call data"""
    output:
        vcf="{data}/vcf/{chromosome}_{index}.biallelic.vcf.gz",
    input:
        vcf="{data}/vcf/{chromosome}_{index}.vcf.gz",
    envmodules:
        *config["envmodules"]["bcftools"],
    conda:
        "../envs/bcftools.yaml"
    benchmark:
        "benchmarks/{data}/vcf/{chromosome}_{index}.biallelic.vcf.gz.benchmark.txt"
    log:
        "logs/{data}/vcf/{chromosome}_{index}.biallelic.vcf.gz.log",
    threads: 10
    shell:
        """
        bcftools view --threads {threads} --min-alleles 2 --max-alleles 2 --types snps \
        {input.vcf} -O z -o {output.vcf}
        """


rule vcftools_calculate_site_statistic:
    """Calculate site statistic with vcftools."""
    output:
        stat=temp(
            "{results}/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}_{index}.{statistic}"
        ),
    input:
        vcf="data/vcf/{chromosome}_{index}.biallelic.vcf.gz",
        tbi="data/vcf/{chromosome}_{index}.biallelic.vcf.gz.tbi",
        keep="resources/samplesets/samples-{sampleset}.keep.txt",
    wildcard_constraints:
        statistic=f"({'|'.join(vcftools_config.keys())})",
        filter="(MQ10|unfiltered)",
    params:
        out=lambda wildcards: f"{wildcards.results}/diversity/{wildcards.filter}/{wildcards.sampleset}/{wildcards.chromosome}/{wildcards.chromosome}_{wildcards.index}",
        args=lambda wildcards: vcftools_config[wildcards.statistic],
        keep=lambda wildcards, input: ",".join(pd.read_table(input.keep).SM.tolist()),
    envmodules:
        *config["envmodules"]["vcftools"],
    conda:
        "../envs/vcftools.yaml"
    benchmark:
        "benchmarks/{results}/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}_{index}.{statistic}.benchmark.txt"
    log:
        "logs/{results}/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}_{index}.{statistic}.log",
    priority: 50
    threads: 1
    shell:
        """
        bcftools view -s {params.keep} -i 'QUAL>=20' -c 1:minor {input.vcf} | \
        vcftools --vcf - --out {params.out} --chr {wildcards.chromosome}_{wildcards.index} {params.args} 2> {log}
        """


rule combine_vcftools_statistics:
    """Combine and gzip vcftools statistics"""
    output:
        gz="{results}/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.gz",
    input:
        stat=lambda wildcards: expand(
            f"{wildcards.results}/diversity/{wildcards.filter}/{wildcards.sampleset}/{wildcards.chromosome}/{wildcards.chromosome}_{{index}}{wildcards.window}.{wildcards.statistic}",
            index=vcf_map[wildcards.chromosome],
        ),
    wildcard_constraints:
        statistic=f"({'|'.join(list(vcftools_windowed_config.keys()) + list(vcftools_config.keys()))})",
        filter="(MQ10|unfiltered)",
        window=r"(|\.w[0-9]+)",
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/{results}/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.gz.benchmark.txt"
    log:
        "logs/{results}/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.log",
    priority: 75
    threads: 1
    shell:
        """
        head -n 1 {input.stat[0]} | gzip -v -c - > {output.gz};
        cat {input.stat} | grep -v CHROM | gzip -v -c - >> {output.gz}
        """


rule d4tools_awk_bedtools_filter_d4:
    """Filter d4 file with awk and bedtools"""
    output:
        bed=temp(
            "{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed"
        ),
    input:
        d4="{data}/aggregate_coverage/{sampleset}/MQ10/{operation}{param}{label}.d4",
    wildcard_constraints:
        operation="(count|sum)",
        param=r"(|_ge\d+)",
        label=r"(.p\d+|)",
    envmodules:
        *get_envmodules(config, "d4tools"),
    conda:
        "../envs/d4tools.yaml"
    benchmark:
        "benchmarks/d4tools_awk_bedtools_filter_d4/{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed.gz.benchmark.txt",
    log:
        "logs/d4tools_awk_bedtools_filter_d4/{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}.{label}.bed.gz.log",
    threads: 1
    shell:
        """d4tools view {input.d4} | awk '{{if (($4>={wildcards.min}) && ($4<={wildcards.max})) print}}' | bedtools merge > {output.bed}"""


rule bgzip_bed:
    """Bgzip output from d4tools_awk_bedtools_filter_d4"""
    output:
        bed="{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed.gz",
        tbi="{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed.gz.tbi",
    input:
        bed="{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed",
    wildcard_constraints:
        label=r"(.p\d+|)",
    envmodules:
        *get_envmodules(config, "tabix_bgzip"),
    conda:
        "../envs/tabixbgzip.yaml"
    benchmark:
        "benchmarks/bgzip_bed/{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed.gz.benchmark.txt"
    log:
        "logs/bgzip_bed/{data}/mask/{sampleset}/{operation}{param}.filter_min{min}_max{max}{label}.bed.gz.log",
    threads: 1
    shell:
        """bgzip -c {input} > {output.bed}
        tabix -p bed {output.bed}"""


rule summarize_vcftools_statistics:
    """Summarize vcftools statistics"""
    output:
        txt="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}{dotw}{window}.summary.txt",
    input:
        gz="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.gz",
        frq="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.frq.count.gz",
        fai="data/resources/pabies-2.0.fa.fai",
        accessibility_masks=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config
        ),
        accessibility_masks_tbi=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config, tbi=True
        ),
        features=lambda wildcards: inputs.summarize_vcftools_statistics_features(
            wildcards, config
        ),
        features_tbi=lambda wildcards: inputs.summarize_vcftools_statistics_features(
            wildcards, config, tbi=True
        ),
    params:
        mask_labels=lambda wildcards: "--mask-labels "
        + ",".join(
            [
                x
                for x in config["mask"]["sampleset"][wildcards.sampleset].keys()
                if x != "window_size"
            ]
        )
        if len(config["mask"]["sampleset"][wildcards.sampleset].items()) > 0
        else "",
        feature_labels=lambda wildcards: "--feature-labels "
        + ",".join(config["mask"]["features"])
        if len(config["mask"]["features"]) > 0
        else "",
        accessibility_masks=lambda wildcards, input: [
            f"-a {fn}" for fn in input.accessibility_masks
        ],
        features=lambda wildcards, input: [f"-f {fn}" for fn in input.features],
        window=lambda wildcards: ""
        if wildcards.window == ""
        else "--window-size " + str(wildcards.window).lstrip("."),
        chunksize=lambda wildcards: ""
        if wildcards.window == ""
        else "--chunksize " + str(wildcards.window).lstrip("."),
        region_chunksize=lambda wildcards: ""
        if wildcards.window == ""
        else "--region-chunksize " + str(wildcards.window).lstrip("."),
    wildcard_constraints:
        dotw="(.w|)",
        window=r"(\d+|)",
        statistic=("sites.pi"),
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}{dotw}{window}.summary.txt.benchmark.txt"
    log:
        "logs/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}{dotw}{window}.summary.txt.log",
    priority: 100
    threads: 1
    shell:
        """conifer-summarize-diversity {input.gz} {input.frq} {input.fai} {params.accessibility_masks} {params.features} {params.mask_labels} {params.feature_labels} -j {threads} --statistic {wildcards.statistic} {params.window} {params.chunksize} {params.region_chunksize} -o {output.txt} > {log} 2>&1"""


rule make_genic_proximity_windows:
    """Make genic proximity regions"""
    output:
        bed="data/resources/pabies-2.0.w{window_size}.e{extension_size}.{mode}.bed",
    input:
        gff=f"data/resources/{PICAB_ANNOTATION}.liftover.gff3",
        fai="data/resources/pabies-2.0.fa.fai",
    wildcard_constraints:
        mode="(CDS|gene)",
    params:
        mode=lambda wildcards: "--gene" if wildcards.mode == "gene" else "",
    conda:
        "../envs/conifer.yaml"
    benchmark:
        f"benchmarks/make_genic_proximity/data/resources/{PICAB_ANNOTATION}.w{{window_size}}.e{{extension_size}}.{{mode}}.bed.benchmark.txt"
    log:
        f"logs/make_genic_proximity/data/resources/{PICAB_ANNOTATION}.w{{window_size}}.e{{extension_size}}.{{mode}}.bed.log",
    threads: 1
    shell:
        """conifer-genic-proximity-windows {params.mode} {input.gff} {input.fai} -w {wildcards.window_size} -e {wildcards.extension_size} -o {output.bed} 2> {log}"""


rule summarize_vcftools_statistics_genic_proximity:
    """Summarize vcftools statistics for genic proximity regions"""
    output:
        txt="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.w{window_size}.e{extension_size}.{mode}.summary.txt",
    input:
        gz="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.gz",
        frq="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.frq.count.gz",
        fai="data/resources/pabies-2.0.fa.fai",
        accessibility_masks=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config
        ),
        accessibility_masks_tbi=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config, tbi=True
        ),
        region="data/resources/pabies-2.0.w{window_size}.e{extension_size}.{mode}.bed",
    params:
        mask_labels=lambda wildcards: "--mask-labels "
        + ",".join(
            [
                x
                for x in config["mask"]["sampleset"][wildcards.sampleset].keys()
                if x != "window_size"
            ]
        )
        if len(config["mask"]["sampleset"][wildcards.sampleset].items()) > 0
        else "",
        accessibility_masks=lambda wildcards, input: [
            f"-a {fn}" for fn in input.accessibility_masks
        ],
    wildcard_constraints:
        statistic=("sites.pi"),
        mode="(CDS|gene)",
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.w{window_size}.e{extension_size}.{mode}.summary.txt.benchmark.txt"
    log:
        "logs/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.w{window_size}.e{extension_size}.{mode}.summary.txt.log",
    priority: 100
    threads: 1
    shell:
        """conifer-summarize-diversity {input.gz} {input.frq} {input.fai} --region {input.region} {params.accessibility_masks} {params.mask_labels} -j {threads} --statistic {wildcards.statistic} -o {output.txt} > {log} 2>&1"""


rule summarize_vcftools_statistics_feature_regions:
    """Summarize vcftools statistics for feature regions (CDS, gene, ...) for a single chunk. """
    output:
        txt="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.{feature}.summary.txt",
    input:
        gz="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.gz",
        frq="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.frq.count.gz",
        fai="data/resources/pabies-2.0.fa.fai",
        accessibility_masks=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config
        ),
        accessibility_masks_tbi=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config, tbi=True
        ),
        region="data/resources/regions/gffutils/{feature}.bed.gz",
    params:
        mask_labels=lambda wildcards: "--mask-labels "
        + ",".join(
            [
                x
                for x in config["mask"]["sampleset"][wildcards.sampleset].keys()
                if x != "window_size"
            ]
        )
        if len(config["mask"]["sampleset"][wildcards.sampleset].items()) > 0
        else "",
        accessibility_masks=lambda wildcards, input: [
            f"-a {fn}" for fn in input.accessibility_masks
        ],
    wildcard_constraints:
        statistic=("sites.pi"),
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.{feature}.summary.txt.benchmark.txt"
    log:
        "logs/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.{feature}.summary.txt.log",
    priority: 100
    threads: 1
    shell:
        """conifer-summarize-diversity {input.gz} {input.frq} {input.fai} --region {input.region} {params.accessibility_masks} {params.mask_labels} -j {threads} --statistic {wildcards.statistic} -o {output.txt} > {log} 2>&1"""


rule summarize_vcftools_statistics_custom_region:
    """Summarize vcftools statistics for a custom region on a single chromosome"""
    output:
        txt="results/diversity/{filter}/{sampleset}/{chromosome}.{statistic}.{region}.summary.txt",
    input:
        gz="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.{statistic}.gz",
        frq="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}.frq.count.gz",
        fai="data/resources/pabies-2.0.fa.fai",
        accessibility_masks=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config
        ),
        accessibility_masks_tbi=lambda wildcards: inputs.summarize_vcftools_statistics_masks(
            wildcards, config, tbi=True
        ),
        region="data/resources/regions/custom/{region}.bed.gz",
    params:
        mask_labels=lambda wildcards: "--mask-labels "
        + ",".join(
            [
                x
                for x in config["mask"]["sampleset"][wildcards.sampleset].keys()
                if x != "window_size"
            ]
        )
        if len(config["mask"]["sampleset"][wildcards.sampleset].items()) > 0
        else "",
        accessibility_masks=lambda wildcards, input: [
            f"-a {fn}" for fn in input.accessibility_masks
        ],
    wildcard_constraints:
        statistic=("sites.pi"),
    conda:
        "../envs/conifer.yaml"
    benchmark:
        "benchmarks/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}.{statistic}.{region}.summary.txt.benchmark.txt"
    log:
        "logs/summarize_vcftools_statistics/results/diversity/{filter}/{sampleset}/{chromosome}.{statistic}.{region}.summary.txt.log",
    priority: 100
    threads: 1
    shell:
        """conifer-summarize-diversity {input.gz} {input.frq} {input.fai} --region {input.region} {params.accessibility_masks} {params.mask_labels} -j {threads} --statistic {wildcards.statistic} -o {output.txt} > {log} 2>&1"""


rule csvtk_concat_results:
    """Merge results"""
    output:
        csv="results/diversity/{filter}/{sampleset}/{statistic}{dotw}{window_size}{dote}{extension_size}{dot}{mode}.summary.csv.gz",
    input:
        txt=expand(
            "results/diversity/{{filter}}/{{sampleset}}/{chromosome}/{chromosome}.{{statistic}}{{dotw}}{{window_size}}{{dote}}{{extension_size}}{{dot}}{{mode}}.summary.txt",
            chromosome=CHROMOSOMES,
            #statistic=["sites.pi"],
        ),
    wildcard_constraints:
        dote=r"(\.e|)",
        dotw=r"(\.w|)",
        dotm=r"(\.|)",
        extension_size=r"(\d+|)",
        window_size=r"(\d+|)",
        statistic=r"(sites.pi)",
        mode=r"(|CDS|gene)",
    conda:
        "../envs/csvtk.yaml"
    benchmark:
        "benchmarks/csvtk_concat_results/results/diversity/{filter}/{sampleset}/{statistic}.summary{dotw}{window_size}{dote}{extension_size}{dot}{mode}.csv.gz.benchmark.txt"
    log:
        "logs/csvtk_concat_results/results/diversity/{filter}/{sampleset}/{statistic}.summary{dotw}{window_size}{dote}{extension_size}{dot}{mode}.csv.gz.log",
    threads: 1
    shell:
        """csvtk concat {input.txt} | gzip -c -v > {output.csv} 2> {log}"""


rule csvtk_concat_results_nowindow:
    """Concatenate resuls for no windows"""
    output:
        csv="results/diversity/{filter}/{sampleset}/{statistic}.summary.csv.gz",
    input:
        txt=expand(
            "results/diversity/{{filter}}/{{sampleset}}/{chromosome}/{chromosome}.{{statistic}}.summary.txt",
            chromosome=CHROMOSOMES,
        ),
    conda:
        "../envs/csvtk.yaml"
    benchmark:
        "benchmarks/csvtk_concat_results_nowindow/results/diversity/{filter}/{sampleset}/{statistic}.summary.csv.gz.benchmark.txt",
    log:
        "logs/csvtk_concat_results_nowindow/results/diversity/{filter}/{sampleset}/{statistic}.summary.csv.gz.log",
    threads: 1
    shell:
        """csvtk concat {input.txt} | gzip -c -v > {output.csv} 2> {log}"""

rule conifer_plot_diversity_boxplot_chromosome:
    """Plot diversity boxplot for a single chromosome"""
    output:
        html=report(
            "results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.summary.txt.boxplot.html"
        ),
    input:
        txt="results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.summary.txt",
    params:
        feature=lambda wildcards: ",".join(config["mask"]["features"]),
    conda:
        "../envs/plotting.yaml"
    wildcard_constraints:
        window=r"(\.\d+|)",
        statistic=("sites.pi"),
    benchmark:
        "benchmarks/conifer_plot_diversity_boxplot/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.summary.txt.boxplot.html.benchmark.txt"
    log:
        "logs/conifer_plot_diversity_boxplot/results/diversity/{filter}/{sampleset}/{chromosome}/{chromosome}{window}.{statistic}.summary.txt.boxplot.html.log",
    threads: 1
    shell:
        """conifer-plot boxplot-long -x feature -y site_score --feature-size-column n_sites --ordering {params.feature} -o {output.html} {input.txt}"""


include: "../rules/config.smk"


localrules:
    all,


if config.get("__test__") is True:

    include: "test-coverage-setup.smk"
    include: "test-setup.smk"
